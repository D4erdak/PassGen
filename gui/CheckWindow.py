import tkinter as tk
from tkinter import ttk
import string
from typing import Dict, List


class CheckWindow:
    def __init__(self, master: tk.Toplevel) -> None:
        self.master = master
        self.setup_window()
        self.create_widgets()
        self.setup_style()

    def setup_window(self) -> None:
        self.master.title("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è")
        self.master.geometry("650x500")
        self.master.resizable(False, False)
        self.master.configure(bg="#f0f0f0")

    def setup_style(self) -> None:
        self.style = ttk.Style()
        self.style.configure("TFrame", background="#f0f0f0")
        self.style.configure("TLabel", background="#f0f0f0")
        self.style.configure(
            "TButton",
            font=("Arial", 10),
            padding=8,
            background="#3498db",
            foreground="black"
        )
        self.style.map(
            "TButton",
            background=[("active", "#2980b9")]
        )

    def create_widgets(self) -> None:
        main_frame = ttk.Frame(self.master)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            main_frame,
            text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è",
            font=("Arial", 16, "bold")
        ).pack(pady=(0, 20))

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        input_frame = ttk.Frame(main_frame)
        input_frame.pack(fill="x", pady=10)

        ttk.Label(input_frame, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:").pack(side="left")

        self.password_var = tk.StringVar()
        self.password_entry = ttk.Entry(
            input_frame,
            textvariable=self.password_var,
            show="*",
            font=("Arial", 12),
            width=40
        )
        self.password_entry.pack(side="left", padx=10)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(pady=10)

        ttk.Button(
            btn_frame,
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            command=self.check_password
        ).pack(side="left", padx=5)

        self.show_password_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(
            btn_frame,
            text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å",
            variable=self.show_password_var,
            command=self.toggle_password_visibility
        ).pack(side="left", padx=5)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        results_frame = ttk.Frame(main_frame)
        results_frame.pack(fill="both", expand=True, pady=20)

        ttk.Label(
            results_frame,
            text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            font=("Arial", 12, "bold")
        ).pack(anchor="w")

        self.results_text = tk.Text(
            results_frame,
            height=10,
            width=60,
            wrap="word",
            font=("Arial", 10),
            state="disabled",
            bg="white",
            padx=10,
            pady=10
        )
        self.results_text.pack(fill="both", expand=True)

        # –®–∫–∞–ª–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.security_level = ttk.Label(
            main_frame,
            text="",
            font=("Arial", 12, "bold")
        )
        self.security_level.pack(pady=10)

    def toggle_password_visibility(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
        show = self.show_password_var.get()
        self.password_entry.config(show="" if show else "*")

    def check_password(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        password = self.password_var.get()
        if not password:
            self.show_result("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        checks = self.run_security_checks(password)
        self.display_results(checks, password)

    def run_security_checks(self, password: str) -> Dict[str, bool]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è"""
        checks = {
            "length": len(password) >= 12,
            "lowercase": any(c in string.ascii_lowercase for c in password),
            "uppercase": any(c in string.ascii_uppercase for c in password),
            "digits": any(c in string.digits for c in password),
            "special": any(c in string.punctuation for c in password),
            "common": password.lower() not in self.get_common_passwords(),
            "repeats": not any(password[i] == password[i + 1] == password[i + 2]
                               for i in range(len(password) - 2)),
            "sequences": not self.has_common_sequences(password)
        }
        return checks

    def get_common_passwords(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π"""
        return [
            "password", "123456", "qwerty", "admin", "welcome",
            "12345678", "abc123", "password1", "12345", "123456789"
        ]

    def has_common_sequences(self, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
        sequences = [
            "123", "234", "345", "456", "567", "678", "789",
            "qwe", "wer", "ert", "rty", "tyu", "yui", "uio", "iop",
            "asd", "sdf", "dfg", "fgh", "ghj", "hjk", "jkl",
            "zxc", "xcv", "cvb", "vbn", "bnm"
        ]
        lower_pass = password.lower()
        return any(seq in lower_pass for seq in sequences)

    def display_results(self, checks: Dict[str, bool], password: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.results_text.config(state="normal")
        self.results_text.delete(1.0, tk.END)

        # –ü–æ–¥—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        passed = sum(checks.values())
        total = len(checks)
        security_percent = int((passed / total) * 100)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if security_percent >= 90:
            level = "–û—Ç–ª–∏—á–Ω—ã–π"
            color = "green"
        elif security_percent >= 70:
            level = "–•–æ—Ä–æ—à–∏–π"
            color = "#4CAF50"
        elif security_percent >= 50:
            level = "–°—Ä–µ–¥–Ω–∏–π"
            color = "orange"
        else:
            level = "–°–ª–∞–±—ã–π"
            color = "red"

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_level.config(
            text=f"–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {level} ({security_percent}%)",
            foreground=color
        )

        # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_details = {
            "length": f"–î–ª–∏–Ω–∞ ‚â• 12 —Å–∏–º–≤–æ–ª–æ–≤: {len(password)}/12",
            "lowercase": "–°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã",
            "uppercase": "–°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã",
            "digits": "–°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã",
            "special": "–°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã",
            "common": "–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º",
            "repeats": "–ù–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥",
            "sequences": "–ù–µ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"
        }

        for check, passed in checks.items():
            status = "‚úì" if passed else "‚úó"
            color = "green" if passed else "red"
            self.results_text.insert(
                tk.END,
                f"{status} {check_details[check]}\n",
                "green" if passed else "red"
            )

        self.results_text.tag_config("green", foreground="green")
        self.results_text.tag_config("red", foreground="red")
        self.results_text.config(state="disabled")

    def show_result(self, message: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.results_text.config(state="normal")
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, message)
        self.results_text.config(state="disabled")
        self.security_level.config(text="", foreground="black")