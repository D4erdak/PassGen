"""
–ú–æ–¥—É–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π PRO".

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å MainWindow, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Tkinter.
"""

import tkinter as tk
from tkinter import ttk
from generator.PasswordGeneration import generate_password
from utils.Clipboard import copy_to_clipboard


class MainWindow:
    """
    –ö–ª–∞—Å—Å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    """

    def __init__(self, master: tk.Tk) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            master (tk.Tk): –ö–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ Tkinter
        """
        self.master = master
        self.setup_window()
        self.setup_style()
        self.create_widgets()
        self.setup_bindings()

    def setup_window(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫–Ω–∞."""
        self.master.title("üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π PRO")
        self.master.geometry("800x600")
        self.master.resizable(False, False)
        self.master.configure(bg="#f0f0f0")

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        self.center_window()

    def center_window(self) -> None:
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""
        self.master.update_idletasks()
        width = self.master.winfo_width()
        height = self.master.winfo_height()
        x = (self.master.winfo_screenwidth() // 2) - (width // 2)
        y = (self.master.winfo_screenheight() // 2) - (height // 2)
        self.master.geometry(f'+{x}+{y}')

    def setup_style(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –≤–∏–¥–∂–µ—Ç–æ–≤."""
        self.style = ttk.Style()

        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π
        self.style.configure(
            "TFrame",
            background="#f0f0f0",
            relief="flat"
        )

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.style.configure(
            "TButton",
            font=("Arial", 12),
            padding=10,
            background="#4CAF50",
            foreground="black",
            borderwidth=1,
            focuscolor="#4CAF50"
        )

        # –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        self.style.map(
            "TButton",
            background=[("active", "#45a049"), ("disabled", "#cccccc")],
            foreground=[("active", "white"), ("disabled", "#888888")]
        )

        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.style.configure(
            "TEntry",
            font=("Consolas", 16),
            foreground="#2c3e50",
            padding=8,
            relief="solid"
        )

    def create_widgets(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ –æ–∫–Ω–µ."""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ttk.Frame(self.master)
        self.main_frame.pack(pady=50, padx=50, fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header()

        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        self.create_password_display()

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.create_generate_button()

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel()

    def create_header(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        ttk.Label(
            self.main_frame,
            text="üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π",
            font=("Arial", 18, "bold"),
            background="#f0f0f0"
        ).pack(pady=(0, 30))

    def create_password_display(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è."""
        self.password_var = tk.StringVar()

        self.password_entry = ttk.Entry(
            self.main_frame,
            textvariable=self.password_var,
            font=("Consolas", 16),
            width=30,
            state="readonly",
            justify="center",
            foreground="#2c3e50",
            style="TEntry"
        )
        self.password_entry.pack(pady=10, ipady=8)

    def create_generate_button(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è."""
        ttk.Button(
            self.main_frame,
            text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å",
            command=self.on_generate_click,
            style="TButton"
        ).pack(pady=20)

    def create_control_panel(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
        control_frame = ttk.Frame(self.main_frame)
        control_frame.pack(pady=20)

        # –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
        self.create_length_control(control_frame)

        # –ß–µ–∫–±–æ–∫—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.create_checkboxes(control_frame)

        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.create_copy_button(control_frame)

    def create_length_control(self, parent: ttk.Frame) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª–∏–Ω–æ–π –ø–∞—Ä–æ–ª—è."""
        ttk.Label(
            parent,
            text="–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è:",
            font=("Arial", 10)
        ).grid(row=0, column=0, padx=5, sticky="e")

        self.length_var = tk.IntVar(value=12)

        ttk.Spinbox(
            parent,
            from_=8,
            to=32,
            textvariable=self.length_var,
            width=5,
            font=("Arial", 10),
            wrap=True
        ).grid(row=0, column=1, padx=5, sticky="w")

    def create_checkboxes(self, parent: ttk.Frame) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–æ–ª—è."""
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —Ü–∏—Ñ—Ä
        self.digits_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            parent,
            text="–¶–∏—Ñ—Ä—ã (0-9)",
            variable=self.digits_var,
            style="TCheckbutton"
        ).grid(row=1, column=0, padx=5, pady=5, sticky="w")

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        self.symbols_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            parent,
            text="–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (!@#)",
            variable=self.symbols_var,
            style="TCheckbutton"
        ).grid(row=1, column=1, padx=5, pady=5, sticky="w")

    def create_copy_button(self, parent: ttk.Frame) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è."""
        ttk.Button(
            parent,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            command=self.handle_copy,
            style="TButton"
        ).grid(row=2, columnspan=2, pady=10)

    def setup_bindings(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π."""
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ Ctrl+C
        self.master.bind('<Control-c>', lambda e: self.handle_copy())

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ F5
        self.master.bind('<F5>', lambda e: self.on_generate_click())

    def on_generate_click(self) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.

        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ.
        """
        try:
            password = generate_password(
                length=self.length_var.get(),
                use_digits=self.digits_var.get(),
                use_special_chars=self.symbols_var.get()
            )
            self.password_var.set(password)
        except Exception as e:
            self.password_var.set("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
            self.master.after(2000, lambda: self.password_var.set(""))

    def handle_copy(self) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.

        –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π.
        """
        if self.password_var.get():
            if copy_to_clipboard(self.password_var.get()):
                original_color = self.password_entry.cget("foreground")
                self.password_entry.config(foreground="green")
                self.master.after(
                    1000,
                    lambda: self.password_entry.config(foreground=original_color))